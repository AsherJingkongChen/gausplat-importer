pub mod image_files;

use crate::error::*;
pub use image_files::*;
use std::io;

#[derive(Clone, Debug, PartialEq)]
pub struct ImageFile<R: io::Read + io::Seek> {
    file_name: String,
    pub reader: R,
}

impl<R: io::Read + io::Seek> ImageFile<R> {
    pub fn new(
        file_name: String,
        reader: R,
    ) -> Self {
        Self { file_name, reader }
    }

    pub fn file_name(&self) -> &str {
        &self.file_name
    }

    pub fn read(&mut self) -> Result<image::RgbImage, Error> {
        use image::DynamicImage;

        let reader = {
            let reader = &mut self.reader;
            reader.rewind().map_err(Error::Io)?;
            image::io::Reader::new(io::BufReader::new(reader))
        };

        reader
            .with_guessed_format()
            .map_err(Error::Io)?
            .decode()
            .map_err(Error::Image)
            .map(DynamicImage::into_rgb8)
    }
}

#[cfg(test)]
mod tests {
    #[test]
    fn image_file_read() {
        use super::*;
        use std::io::Cursor;

        let reader = Cursor::new(&[
            0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00,
            0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0x15, 0xc4, 0x89,
            0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xae, 0xce,
            0x1c, 0xe9, 0x00, 0x00, 0x00, 0x44, 0x65, 0x58, 0x49, 0x66, 0x4d,
            0x4d, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x87, 0x69,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0xa0, 0x01, 0x00, 0x03, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x04, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x03, 0x00, 0x04,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0xf9, 0x22, 0x9d, 0xfe, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x44,
            0x41, 0x54, 0x08, 0x1d, 0x63, 0xf8, 0xcf, 0x60, 0xdb, 0x0d, 0x00,
            0x05, 0x06, 0x01, 0xc8, 0x5d, 0xd6, 0x92, 0xd1, 0x00, 0x00, 0x00,
            0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
        ]);

        let mut image_file = ImageFile {
            file_name: "#ff003d8b-1x1.png".into(),
            reader,
        };

        // It should be idempotent except for IO errors
        for _ in 0..3 {
            let image = image_file.read();
            assert!(image.is_ok(), "{:#?}", image.unwrap_err());

            let image = image.unwrap();
            assert_eq!(image.height(), 1);
            assert_eq!(image.width(), 1);
            assert_eq!(image.get_pixel(0, 0).0, [0xff, 0x00, 0x3d]);
        }
    }
}
